version: "3.9"

services:
  api:
    # Se você quer buildar sua imagem custom (com o hero.css), mantenha "build".
    # Se preferir usar a imagem oficial, troque por:
    # image: ghcr.io/danny-avila/librechat:latest
    build:
      context: .
      dockerfile: Dockerfile
      # args:
      #   - THEME_SHA=${THEME_SHA:-dev}
    restart: unless-stopped

    # Mantido: acesso direto na 3080 como você já usa
    ports:
      - "3080:3080"         # expõe só a API do LibreChat

    environment:
      - NODE_ENV=production
      # habilita o uso do sandbox dentro do LibreChat
      - SANDBOX=true
      # aponta para o serviço "sandbox" na rede do compose (NÃO use localhost aqui)
      - SANDBOX_URL=http://sandbox:3080
      # (opcional) se o LibreChat estiver atrás de proxy/reverse-proxy
      # - TRUST_PROXY=true

    volumes:
      # 1) injeta o .env do aplicativo dentro do container (LibreChat lê /app/.env)
      - type: bind
        source: ./.env
        target: /app/.env

      # 2) sua config do LibreChat (hot swap, sem rebuild)
      - type: bind
        # AJUSTE este caminho se no Dokploy o repositório estiver noutra pasta
        source: ./custom/librechat.yaml
        target: /app/config/librechat.yaml

      # 3) estáticos/persistências opcionais
      - ./images:/app/client/public/images
      - ./uploads:/app/uploads
      - ./logs:/app/api/logs

    depends_on:
      - sandbox

    # >>> Integração com Traefik (não quebra o uso atual na 3080) <<<
    labels:
      - "traefik.enable=true"
      # Roteador: tudo que chegar no Traefik vai para este serviço
      - "traefik.http.routers.librechat.rule=PathPrefix(`/`)"
      - "traefik.http.routers.librechat.entrypoints=web"
      # Porta interna do serviço (a que o Traefik deve usar)
      - "traefik.http.services.librechat.loadbalancer.server.port=3080"
      # Middleware para injetar a CSP necessária aos Artifacts (Sandpack)
      - "traefik.http.middlewares.csp.headers.contentSecurityPolicy=frame-src 'self' https://*.codesandbox.io"
      - "traefik.http.routers.librechat.middlewares=csp@docker"

  sandbox:
    image: librechat/sandbox:latest
    container_name: librechat_sandbox
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      # (opcional) se quiser restringir CORS do sandbox, você pode expor variáveis aqui
      # como SANDBOX_CORS_ORIGIN, dependendo da versão da imagem. Se não souber, deixe sem.
    expose:
      - "3080"              # só na rede interna do compose
    # Se quiser acessar o sandbox diretamente do host para debug, descomente:
    # ports:
    #   - "3081:3080"

  # Novo: Traefik como sidecar, para injetar o header CSP
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Entrada HTTP do Traefik (sem conflitar com sua 3080 atual)
      - --entrypoints.web.address=:80
      # (opcional) dashboard do Traefik para debug:
      # - --api.insecure=true
    # Mapeamos a porta 80 do Traefik para 8090 no host,
    # para evitar conflito e manter seu acesso atual na 3080.
    ports:
      - "8090:80"
      # (opcional) dashboard se habilitar --api.insecure:
      # - "8091:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

# networks:
#   default:
#     name: librechat_net   # opcional: nomear a rede
